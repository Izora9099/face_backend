# Generated by Django 4.2.23 on 2025-06-24 11:06

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_cryptography.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdminUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('role', models.CharField(choices=[('superadmin', 'Superadmin'), ('staff', 'Staff'), ('teacher', 'Teacher')], default='staff', max_length=20)),
                ('permissions', models.JSONField(default=list)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_code', models.CharField(max_length=20, unique=True)),
                ('course_name', models.CharField(max_length=200)),
                ('credits', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['course_code'],
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department_name', models.CharField(max_length=100)),
                ('department_code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['department_name'],
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level_name', models.CharField(max_length=50)),
                ('level_code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('departments', models.ManyToManyField(related_name='levels', to='core.department')),
            ],
            options={
                'ordering': ['level_name'],
            },
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialization_name', models.CharField(max_length=100)),
                ('specialization_code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specializations', to='core.department')),
            ],
            options={
                'ordering': ['specialization_name'],
            },
        ),
        migrations.CreateModel(
            name='SystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_name', models.CharField(default='FACE.IT School', max_length=200)),
                ('school_address', models.TextField(blank=True)),
                ('school_phone', models.CharField(blank=True, max_length=20)),
                ('school_email', models.EmailField(blank=True, max_length=254)),
                ('academic_year', models.CharField(default='2024-2025', max_length=20)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('date_format', models.CharField(default='YYYY-MM-DD', max_length=20)),
                ('time_format', models.CharField(default='24h', max_length=10)),
                ('attendance_grace_period', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(60)])),
                ('late_threshold', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(120)])),
                ('auto_mark_absent_after', models.IntegerField(default=2, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(24)])),
                ('require_checkout', models.BooleanField(default=False)),
                ('allow_manual_attendance', models.BooleanField(default=True)),
                ('attendance_notifications', models.BooleanField(default=True)),
                ('face_recognition_enabled', models.BooleanField(default=True)),
                ('face_confidence_threshold', models.IntegerField(default=80, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(99)])),
                ('max_face_images_per_student', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('face_detection_timeout', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(60)])),
                ('auto_capture_enabled', models.BooleanField(default=False)),
                ('face_image_quality_threshold', models.IntegerField(default=70, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(100)])),
                ('email_enabled', models.BooleanField(default=False)),
                ('smtp_host', models.CharField(blank=True, max_length=100)),
                ('smtp_port', models.IntegerField(default=587)),
                ('smtp_username', models.CharField(blank=True, max_length=100)),
                ('smtp_password', models.CharField(blank=True, max_length=100)),
                ('smtp_use_tls', models.BooleanField(default=True)),
                ('email_from_address', models.EmailField(blank=True, max_length=254)),
                ('email_from_name', models.CharField(default='FACE.IT System', max_length=100)),
                ('send_absence_notifications', models.BooleanField(default=True)),
                ('send_late_notifications', models.BooleanField(default=True)),
                ('send_weekly_reports', models.BooleanField(default=False)),
                ('parent_notification_enabled', models.BooleanField(default=False)),
                ('admin_notification_enabled', models.BooleanField(default=True)),
                ('max_file_upload_size', models.IntegerField(default=10, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('image_compression_quality', models.IntegerField(default=85, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(100)])),
                ('auto_backup_enabled', models.BooleanField(default=False)),
                ('backup_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], default='weekly', max_length=20)),
                ('backup_retention_days', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(7), django.core.validators.MaxValueValidator(365)])),
                ('storage_cleanup_enabled', models.BooleanField(default=True)),
                ('maintenance_mode', models.BooleanField(default=False)),
                ('maintenance_message', models.TextField(default='System is under maintenance. Please check back later.')),
                ('system_announcement', models.TextField(blank=True)),
                ('debug_mode', models.BooleanField(default=False)),
                ('log_level', models.CharField(choices=[('DEBUG', 'Debug'), ('INFO', 'Info'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], default='INFO', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'System Settings',
                'verbose_name_plural': 'System Settings',
            },
        ),
        migrations.CreateModel(
            name='SystemBackup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=200)),
                ('file_path', models.CharField(max_length=500)),
                ('file_size', models.BigIntegerField()),
                ('backup_type', models.CharField(choices=[('manual', 'Manual'), ('automatic', 'Automatic'), ('scheduled', 'Scheduled')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('matric_number', models.CharField(max_length=50, unique=True)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(blank=True, max_length=20)),
                ('address', models.TextField(blank=True)),
                ('student_id', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('student_class', models.CharField(blank=True, max_length=100)),
                ('name', models.CharField(blank=True, max_length=255)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=20)),
                ('attendance_rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('face_encoding', django_cryptography.fields.encrypt(models.BinaryField())),
                ('face_encoding_model', models.CharField(choices=[('cnn', 'CNN'), ('hog', 'HOG'), ('facenet', 'FaceNet')], default='cnn', max_length=10)),
                ('registered_on', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='core.department')),
                ('enrolled_courses', models.ManyToManyField(blank=True, related_name='enrolled_students', to='core.course')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='core.level')),
                ('specialization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='core.specialization')),
            ],
            options={
                'ordering': ['first_name', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='SecuritySettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_password_length', models.IntegerField(default=8, validators=[django.core.validators.MinValueValidator(6), django.core.validators.MaxValueValidator(20)])),
                ('require_uppercase', models.BooleanField(default=True)),
                ('require_lowercase', models.BooleanField(default=True)),
                ('require_numbers', models.BooleanField(default=True)),
                ('require_special_chars', models.BooleanField(default=False)),
                ('password_expiry_days', models.IntegerField(default=90, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(365)])),
                ('session_timeout_minutes', models.IntegerField(default=60, validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(480)])),
                ('max_concurrent_sessions', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('max_failed_attempts', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(10)])),
                ('lockout_duration_minutes', models.IntegerField(default=15, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(120)])),
                ('enable_2fa', models.BooleanField(default=False)),
                ('force_2fa_for_admins', models.BooleanField(default=False)),
                ('enable_ip_whitelist', models.BooleanField(default=False)),
                ('allowed_ip_ranges', models.TextField(blank=True, help_text='One IP/range per line')),
                ('log_all_activities', models.BooleanField(default=True)),
                ('log_retention_days', models.IntegerField(default=90, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(365)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Security Settings',
                'verbose_name_plural': 'Security Settings',
            },
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=150)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('location', models.CharField(blank=True, max_length=100)),
                ('success', models.BooleanField()),
                ('failure_reason', models.CharField(blank=True, max_length=200)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['username', '-timestamp'], name='core_logina_usernam_826338_idx'), models.Index(fields=['ip_address', '-timestamp'], name='core_logina_ip_addr_55d563_idx'), models.Index(fields=['success', '-timestamp'], name='core_logina_success_d149db_idx')],
            },
        ),
        migrations.AddField(
            model_name='level',
            name='specializations',
            field=models.ManyToManyField(related_name='levels', to='core.specialization'),
        ),
        migrations.AddField(
            model_name='course',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='core.department'),
        ),
        migrations.AddField(
            model_name='course',
            name='level',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='core.level'),
        ),
        migrations.AddField(
            model_name='course',
            name='specializations',
            field=models.ManyToManyField(related_name='courses', to='core.specialization'),
        ),
        migrations.AddField(
            model_name='course',
            name='teachers',
            field=models.ManyToManyField(blank=True, limit_choices_to={'role': 'teacher'}, related_name='taught_courses', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='AttendanceRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('late', 'Late')], default='present', max_length=10)),
                ('check_in_time', models.DateTimeField(auto_now_add=True)),
                ('check_out_time', models.DateTimeField(blank=True, null=True)),
                ('attendance_date', models.DateField(auto_now_add=True)),
                ('recognition_model', models.CharField(choices=[('cnn', 'CNN'), ('hog', 'HOG'), ('facenet', 'FaceNet')], default='cnn', max_length=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='core.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendance_records', to='core.student')),
            ],
            options={
                'ordering': ['-check_in_time'],
                'unique_together': {('student', 'course', 'attendance_date')},
            },
        ),
        migrations.CreateModel(
            name='ActiveSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_key', models.CharField(max_length=100, unique=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('location', models.CharField(blank=True, max_length=100)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('core.attendancerecord',),
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('VIEW_STUDENTS', 'View Students'), ('MARK_ATTENDANCE', 'Mark Attendance'), ('USE_FACE_RECOGNITION', 'Use Face Recognition'), ('GENERATE_REPORT', 'Generate Report'), ('UPDATE_STUDENT', 'Update Student'), ('DELETE_ATTENDANCE', 'Delete Attendance'), ('CREATE_STUDENT', 'Create Student'), ('LOGIN', 'Login'), ('LOGOUT', 'Logout'), ('VIEW_ADMIN_USERS', 'View Admin Users'), ('CREATE_ADMIN_USER', 'Create Admin User'), ('UPDATE_ADMIN_USER', 'Update Admin User'), ('DELETE_ADMIN_USER', 'Delete Admin User'), ('CHANGE_SECURITY_SETTINGS', 'Change Security Settings'), ('TERMINATE_SESSION', 'Terminate Session'), ('MANAGE_DEPARTMENTS', 'Manage Departments'), ('MANAGE_SPECIALIZATIONS', 'Manage Specializations'), ('MANAGE_LEVELS', 'Manage Levels'), ('MANAGE_COURSES', 'Manage Courses')], max_length=50)),
                ('resource', models.CharField(max_length=100)),
                ('resource_id', models.IntegerField(blank=True, null=True)),
                ('details', models.TextField()),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('warning', 'Warning')], default='success', max_length=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', '-timestamp'], name='core_userac_user_id_efaa8e_idx'), models.Index(fields=['action', '-timestamp'], name='core_userac_action_b04fa7_idx'), models.Index(fields=['status', '-timestamp'], name='core_userac_status_1c7457_idx')],
            },
        ),
    ]
